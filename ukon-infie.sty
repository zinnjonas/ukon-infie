%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% The Ultimate Latex-Header for the best students
%% Rev.:	b1.1
%% Autoren:	Franz Abzieher, Stephan Heidinger,Manuel Hotz, Jonas Zinn
%%
%% Datum:	30.12.2011
%%
%% Styleguide:  4 Soft-Tabs
%% Licence:	This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Germany License.
%%		The licence can be found at.
%%		https://creativecommons.org/licenses/by-nc-sa/3.0/legalcode
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\NeedsTeXFormat{LaTeX2e} %Proforma;D

\def\german{0}

\DeclareOption{de}{\edef\german{1}}

\ProcessOptions

\ProvidesPackage{ukon-infie}[2011/10/16 2.1 ukon-infie Package]

\usepackage{amsmath} % Verbesserter Mathesatz
\usepackage{amsthm} % Normaler Mathesatz
\usepackage{amsfonts} %capital-letter font
\usepackage{amsthm,amssymb} % Zeichen-Satz
\usepackage{bigfoot} % komplexe Fußnotenapparate(Fußnoten in Fußnoten und andere Späße)
\usepackage{colortbl}
\usepackage{calc}
%\usepackage{elipsis} % behandelt Leerraum um Auslassungspunkte
\usepackage{etoolbox, mathtools}
\usepackage[T1]{fontenc} % normaler erweitere Zeichnesatz
\usepackage{framed}  % Ramenpaket für zum Einfügen von schönen Ramen
\usepackage{graphicx}
\usepackage{hhline}
\usepackage{ifthen} % Packet für if then else
\usepackage{listings} %for code-listings (inkl. Tab-Styling)
\usepackage{lmodern}
\usepackage{longtable, lscape} % Querformat und GroßTabellen
\usepackage{marginnote} % Für bessere Randnotizen mit \marginnote statt \marginline
\usepackage{marvosym} % für stopsign etc...
\usepackage{microtype} % div. Verbesserungen des Schriftsatzes (Grauwert, opt. Randausgleich, Zeilenumbruch)
\usepackage{multirow}
\usepackage[ngerman]{babel} % Neue Rechtschreibung
\usepackage{pifont} %für die Dings zeichen
\usepackage[sans]{dsfont} %für alternative Mengensymbole
\usepackage{tikz} % für Diagramme und Bilder (z.B. *.eps)
\usepackage{units} % z.B. fuer \nicefrac{}{}
\usepackage[utf8]{inputenc} % utf8 für den Editor
\usepackage{wasysym} %u.a. für \lightning
\usepackage{xcolor}
\usepackage{tokenizer}
\usepackage{twoopt}
\usepackage{substr}
\usepackage{forloop}
\usepackage{lastpage}
\usepackage{stmaryrd} %u.a. für \lightning

\usepackage{fancyhdr}
\pagestyle{fancy}
\renewcommand{\headrulewidth}{0pt}
\fancyhead{}
\topmargin -2cm
\textheight 25cm
\textwidth 16.0 cm
\oddsidemargin -0.1cm

\newcommand{\PointArray}{}
\newcommand{\content}{}
\newcommand{\deadline}{}
\newcommand{\name}{}
\newcommand{\semester}{}
\newcommand{\lecture}{}
\newcommand{\lectureshort}{}

\newcounter{exerciseNumber}
\newcounter{numberTask}
\newcounter{totalNumber}
\newlength{\numberPointsTotal}
\setlength{\numberPointsTotal}{0 pt}
\newlength{\numberAdditionalPoints}
\setlength{\numberAdditionalPoints}{0 pt}
\newcounter{ctPointTable}
\newcounter{tempPointTable}
\newcounter{moveToPointTable}
\newcounter{linePointTable}

\newcounter{VennDiagrammA}
\newcounter{VennDiagrammB}
\newcounter{VennDiagrammC}
\newcounter{VennDiagrammD}
\newcounter{VennDiagrammE}
\newcounter{VennDiagrammF}
\newcounter{VennDiagrammG}
\newcounter{VennDiagrammH}

\newcounter{againATemp}

\newcommandtwoopt{\bigVenn}[3][\empty][\empty]
{
\def\Color{}
\ifthenelse{\equal{#1}{\empty}}{\def\Kreisfarbe{red}}
{\def\Kreisfarbe{#1}}
\ifthenelse{\equal{#2}{\empty}}{\def\Source{A,B,C,U}}
{\def\Source{#2}}

\setcounter{VennDiagrammA}{#3/10000000}
\setcounter{VennDiagrammB}{#3/1000000 -\theVennDiagrammA*10}
\setcounter{VennDiagrammC}{#3/100000 -\theVennDiagrammA*100 - \theVennDiagrammB*10}
\setcounter{VennDiagrammD}{#3/10000 -\theVennDiagrammA*1000 - \theVennDiagrammB*100 - \theVennDiagrammC*10}
\setcounter{VennDiagrammE}{#3/1000 -\theVennDiagrammA*10000 - \theVennDiagrammB*1000 - \theVennDiagrammC*100 - \theVennDiagrammD*10}
\setcounter{VennDiagrammF}{#3/100 -\theVennDiagrammA*100000 - \theVennDiagrammB*10000 - \theVennDiagrammC*1000 - \theVennDiagrammD*100 - \theVennDiagrammE*10}
\setcounter{VennDiagrammG}{#3/10 -\theVennDiagrammA*1000000 - \theVennDiagrammB*100000 - \theVennDiagrammC*10000 - \theVennDiagrammD*1000 - \theVennDiagrammE*100 - \theVennDiagrammF*10}
\setcounter{VennDiagrammH}{#3   -\theVennDiagrammA*10000000 - \theVennDiagrammB*1000000 - \theVennDiagrammC*100000 - \theVennDiagrammD*10000 - \theVennDiagrammE*1000 - \theVennDiagrammF*100 - \theVennDiagrammG*10}

\begin{tikzpicture}
%predefinition of nodes for clippings
\node (rectLL) at (0,0) {};
\node (rectUR) at (5,5) {};

\node (centerA) at (1.75,1.875) {};
\node (centerB) at (3.25,1.875) {};
\node (centerC) at (2.5,3.25){};

%A^c \cap B^C
\ifthenelse{\theVennDiagrammA > 0}
{
\begin{scope}%[even odd rule]
\clip (centerA) circle (1.5) (rectLL) rectangle (rectUR);
\clip (centerB) circle (1.5) (rectLL) rectangle (rectUR);
\clip (centerC) circle (1.5) (rectLL) rectangle (rectUR);
\setcounter{againATemp}{1}
\let\Color\Kreisfarbe
\GetTokens{TokenOne}{TokenTwo}{\Color}
\let\Color\TokenTwo
\whiledo{\theagainATemp < \theVennDiagrammA}
{
\GetTokens{TokenOne}{TokenTwo}{\Color}
\ifthenelse{\equal{\TokenTwo}{\empty}}{\let\TokenOne\Color}
{\let\Color\TokenTwo}
\stepcounter{againATemp}
}
\typeout{\TokenOne}
\ifthenelse{\equal{\TokenOne}{\empty}}{\let\TokenOne\Kreisfarbe}{}
\fill[\TokenOne,rounded corners=10] (rectLL) rectangle (rectUR);
\end{scope}
}
{}

% A\setminus B \setminus C
\ifthenelse{\theVennDiagrammB > 0}
{
\begin{scope}
\clip (centerA) circle (1.5);
\clip (centerB) circle (1.5) (rectLL) rectangle (rectUR);
\clip (centerC) circle (1.5) (rectLL) rectangle (rectUR);
\setcounter{againATemp}{1}
\let\Color\Kreisfarbe
\GetTokens{TokenOne}{TokenTwo}{\Color}
\let\Color\TokenTwo
\whiledo{\theagainATemp < \theVennDiagrammB}
{
\GetTokens{TokenOne}{TokenTwo}{\Color}
\ifthenelse{\equal{\TokenTwo}{\empty}}{\let\TokenOne\Color}
{\let\Color\TokenTwo}
\stepcounter{againATemp}
}
\ifthenelse{\equal{\TokenOne}{\empty}}{\let\TokenOne\Kreisfarbe}{}
\fill[color=\TokenOne] (rectLL) rectangle (rectUR);
\end{scope}
}
{}

% B \setminus A \setminus C
\ifthenelse{\theVennDiagrammH > 0}
{
\begin{scope}
\clip (centerB) circle (1.5);
\clip (centerA) circle (1.5) (rectLL) rectangle (rectUR);
\clip (centerC) circle (1.5) (rectLL) rectangle (rectUR);
\setcounter{againATemp}{1}
\let\Color\Kreisfarbe
\GetTokens{TokenOne}{TokenTwo}{\Color}
\let\Color\TokenTwo
\whiledo{\theagainATemp < \theVennDiagrammH}
{
\GetTokens{TokenOne}{TokenTwo}{\Color}
\ifthenelse{\equal{\TokenTwo}{\empty}}{\let\TokenOne\Color}
{\let\Color\TokenTwo}
\stepcounter{againATemp}
}
\ifthenelse{\equal{\TokenOne}{\empty}}{\let\TokenOne\Kreisfarbe}{}
\fill[color=\TokenOne] (rectLL) rectangle (rectUR);
\end{scope}
}
{}

% C \setminus A \setminus B
\ifthenelse{\theVennDiagrammF > 0}
{
\begin{scope}
\clip (centerC) circle (1.5);
\clip (centerA) circle (1.5) (rectLL) rectangle (rectUR);
\clip (centerB) circle (1.5) (rectLL) rectangle (rectUR);
\setcounter{againATemp}{1}
\let\Color\Kreisfarbe
\GetTokens{TokenOne}{TokenTwo}{\Color}
\let\Color\TokenTwo
\whiledo{\theagainATemp < \theVennDiagrammF}
{
\GetTokens{TokenOne}{TokenTwo}{\Color}
\ifthenelse{\equal{\TokenTwo}{\empty}}{\let\TokenOne\Color}
{\let\Color\TokenTwo}
\stepcounter{againATemp}
}
\ifthenelse{\equal{\TokenOne}{\empty}}{\let\TokenOne\Kreisfarbe}{}
\fill[color=\TokenOne] (rectLL) rectangle (rectUR);
\end{scope}
}
{}

% A \cap B \setminus B
\ifthenelse{\theVennDiagrammE > 0}
{
\begin{scope}
\clip (centerA) circle (1.5);
\clip (centerB) circle (1.5) (rectLL);
\clip (centerC) circle (1.5) (rectLL) rectangle (rectUR);
\setcounter{againATemp}{1}
\let\Color\Kreisfarbe
\GetTokens{TokenOne}{TokenTwo}{\Color}
\let\Color\TokenTwo
\whiledo{\theagainATemp < \theVennDiagrammE}
{
\GetTokens{TokenOne}{TokenTwo}{\Color}
\ifthenelse{\equal{\TokenTwo}{\empty}}{\let\TokenOne\Color}
{\let\Color\TokenTwo}
\stepcounter{againATemp}
}
\ifthenelse{\equal{\TokenOne}{\empty}}{\let\TokenOne\Kreisfarbe}{}
\fill[color=\TokenOne] (rectLL) rectangle (rectUR);
\end{scope}
}{}

% A \cap C \setminus B
\ifthenelse{\theVennDiagrammC > 0}
{
\begin{scope}
\clip (centerA) circle (1.5);
\clip (centerC) circle (1.5);
\clip (centerB) circle (1.5) (rectLL) rectangle (rectUR);
\setcounter{againATemp}{1}
\let\Color\Kreisfarbe
\GetTokens{TokenOne}{TokenTwo}{\Color}
\let\Color\TokenTwo
\whiledo{\theagainATemp < \theVennDiagrammC}
{
\GetTokens{TokenOne}{TokenTwo}{\Color}
\ifthenelse{\equal{\TokenTwo}{\empty}}{\let\TokenOne\Color}
{\let\Color\TokenTwo}
\stepcounter{againATemp}
}
\ifthenelse{\equal{\TokenOne}{\empty}}{\let\TokenOne\Kreisfarbe}{}
\fill[color=\TokenOne] (rectLL) rectangle (rectUR);
\end{scope}
}{}

% B \cap C \setminus A
\ifthenelse{\theVennDiagrammG > 0}
{
\begin{scope}
\clip (centerB) circle (1.5);
\clip (centerC) circle (1.5);
\clip (centerA) circle (1.5) (rectLL) rectangle (rectUR);
\setcounter{againATemp}{1}
\let\Color\Kreisfarbe
\GetTokens{TokenOne}{TokenTwo}{\Color}
\let\Color\TokenTwo
\whiledo{\theagainATemp < \theVennDiagrammG}
{
\GetTokens{TokenOne}{TokenTwo}{\Color}
\ifthenelse{\equal{\TokenTwo}{\empty}}{\let\TokenOne\Color}
{\let\Color\TokenTwo}
\stepcounter{againATemp}
}
\ifthenelse{\equal{\TokenOne}{\empty}}{\let\TokenOne\Kreisfarbe}{}
\fill[color=\TokenOne] (rectLL) rectangle (rectUR);
\end{scope}
}{}

% A \cap B \cap C
\ifthenelse{\theVennDiagrammD > 0}
{
\begin{scope}
\clip (centerA) circle (1.5);
\clip (centerB) circle (1.5);
\clip (centerC) circle (1.5);
\setcounter{againATemp}{1}
\let\Color\Kreisfarbe
\GetTokens{TokenOne}{TokenTwo}{\Color}
\let\Color\TokenTwo
\whiledo{\theagainATemp < \theVennDiagrammD}
{
\GetTokens{TokenOne}{TokenTwo}{\Color}
\ifthenelse{\equal{\TokenTwo}{\empty}}{\let\TokenOne\Color}
{\let\Color\TokenTwo}
\stepcounter{againATemp}
}
\ifthenelse{\equal{\TokenOne}{\empty}}{\let\TokenOne\Kreisfarbe}{}
\fill[color=\TokenOne] (rectLL) rectangle (rectUR);
\end{scope}
}{}

%Venn-Diagramm: outlines
\node (rectLL) at (rectLL) {};
\GetTokens{TokenOne}{TokenTwo}{\Source}
\let\Source\TokenTwo
\node (centerA) at (centerA) [label=left:\TokenOne] {};
\GetTokens{TokenOne}{TokenTwo}{\Source}
\let\Source\TokenTwo
\node (centerB) at (centerB) [label=right:\TokenOne] {};
\GetTokens{TokenOne}{TokenTwo}{\Source}
\let\Source\TokenTwo
\node (centerC) at (centerC) [label=above:\TokenOne] {};
\node (rectUR) at (rectUR) [label=below left:\TokenTwo] {};
\draw[thick,rounded corners=10] (rectLL) rectangle (rectUR);
\draw[thick] (centerA) circle (1.5);
\draw[thick] (centerB) circle (1.5);
\draw[thick] (centerC) circle (1.5);

\end{tikzpicture}
}

\newcommandtwoopt{\Venn}[3][\empty][\empty]
{

\def\Source{A,B,U}
\def\Kreisfarbe{red}
\def\Color{}

\ifthenelse{\equal{#1}{\empty}}{}
{\def\Kreisfarbe{#1}}
\ifthenelse{\equal{#2}{\empty}}{}
{\def\Source{#2}}

\setcounter{VennDiagrammA}{#3/1000}
\setcounter{VennDiagrammB}{#3/100 - \theVennDiagrammA*10}
\setcounter{VennDiagrammC}{#3/10 - \theVennDiagrammA*100 - \theVennDiagrammB*10}
\setcounter{VennDiagrammD}{#3 -\theVennDiagrammA*1000 - \theVennDiagrammB*100 - \theVennDiagrammC*10}

\begin{tikzpicture}
%predefinition of nodes for clippings
\node (rectLL) at (0,0) {};
\node (rectUR) at (5,3.75) {};
\node (centerA) at (1.75,1.875) {};
\node (centerB) at (3.25,1.875) {};

%A \cap B
\ifthenelse{\theVennDiagrammC > 0}
{
\begin{scope}
\clip (centerA) circle (1.5);
\clip (centerB) circle (1.5);
\setcounter{againATemp}{1}
\let\Color\Kreisfarbe
\GetTokens{TokenOne}{TokenTwo}{\Color}
\let\Color\TokenTwo
\whiledo{\theagainATemp < \theVennDiagrammC}
{
\GetTokens{TokenOne}{TokenTwo}{\Color}
\ifthenelse{\equal{\TokenTwo}{\empty}}{\let\TokenOne\Color}
{\let\Color\TokenTwo }
\stepcounter{againATemp}
}
\ifthenelse{\equal{\TokenOne}{\empty}}{\let\TokenOne\Kreisfarbe}{}
\fill[color=\TokenOne] (rectLL) rectangle (rectUR);
\end{scope}
}
{
}

%A^c \cap B^C
\ifthenelse{\theVennDiagrammA > 0}
{
\begin{scope}%[even odd rule]
\clip (centerA) circle (1.5) (rectLL) rectangle (rectUR);
\clip (centerB) circle (1.5) (rectLL) rectangle (rectUR);
\setcounter{againATemp}{1}
\let\Color\Kreisfarbe
\GetTokens{TokenOne}{TokenTwo}{\Color}
\let\Color\TokenTwo
\whiledo{\theagainATemp < \theVennDiagrammA}
{
\GetTokens{TokenOne}{TokenTwo}{\Color}
\ifthenelse{\equal{\TokenTwo}{\empty}}{\let\TokenOne\Color}
{\let\Color\TokenTwo}
\stepcounter{againATemp}
}
\ifthenelse{\equal{\TokenOne}{\empty}}{\let\TokenOne\Kreisfarbe}{}
\fill[color=\TokenOne,rounded corners=10] (rectLL) rectangle (rectUR);
\end{scope}
}
{
}

%A\setminus B
\ifthenelse{\theVennDiagrammB > 0}
{
\begin{scope}[even odd rule]
\clip (centerA) circle (1.5) (centerB) circle (1.5);
\clip (centerA) circle (1.5);
\setcounter{againATemp}{1}
\let\Color\Kreisfarbe
\GetTokens{TokenOne}{TokenTwo}{\Color}
\let\Color\TokenTwo
\whiledo{\theagainATemp < \theVennDiagrammB}
{
\GetTokens{TokenOne}{TokenTwo}{\Color}
\ifthenelse{\equal{\TokenTwo}{\empty}}{\let\TokenOne\Color}
{\let\Color\TokenTwo}
\stepcounter{againATemp}
}
\ifthenelse{\equal{\TokenOne}{\empty}}{\let\TokenOne\Kreisfarbe}{}
\fill[color=\TokenOne] (rectLL) rectangle (rectUR);
\end{scope}
}
{
}

%B\setminus A
\ifthenelse{\theVennDiagrammD > 0}
{
\begin{scope}[even odd rule]
\clip (centerA) circle (1.5) (centerB) circle (1.5);
\clip (centerB) circle (1.5);
\setcounter{againATemp}{1}
\let\Color\Kreisfarbe
\GetTokens{TokenOne}{TokenTwo}{\Color}
\let\Color\TokenTwo
\whiledo{\theagainATemp < \theVennDiagrammD}
{
\GetTokens{TokenOne}{TokenTwo}{\Color}
\ifthenelse{\equal{\TokenTwo}{\empty}}{\let\TokenOne\Color}
{\let\Color\TokenTwo}
\stepcounter{againATemp}
}
\ifthenelse{\equal{\TokenOne}{\empty}}{\let\TokenOne\Kreisfarbe}{}
\fill[color=\TokenOne] (rectLL) rectangle (rectUR);
\end{scope}
}
{
}

%Venn-Diagramm, without fillings
\node (rectLL) at (rectLL) {};
\GetTokens{TokenOne}{TokenTwo}{\Source}
\let\Source\TokenTwo
\node (centerA) at (centerA) [label=left:\TokenOne] {};
\GetTokens{TokenOne}{TokenTwo}{\Source}
\node (centerB) at (centerB) [label=right:\TokenOne] {};
\node (rectUR) at (rectUR) [label=below left:\TokenTwo] {};

\draw[thick,rounded corners=10] (rectLL) rectangle (rectUR);
\draw[thick] (centerA) circle (1.5);
\draw[thick] (centerB) circle (1.5);

\end{tikzpicture}
}

\newcommand{\pointsTable}
{

\setcounter{moveToPointTable}{0}
\setcounter{linePointTable}{0}
\def\tempArray{0}
\newboolean{boolvar} %Deklaration
\setboolean{boolvar}{true} %Zuweisung
\newcounter{anzPunkteGesamt}
\setcounter{anzPunkteGesamt}{0}
\newcounter{tPunkteG}
\setcounter{tPunkteG}{0}
\newlength{\firstlen}
\setlength{\firstlen}{\theanzPunkteGesamt.\thetPunkteG pt}
\ifdim\firstlen=\numberPointsTotal
	\setboolean{boolvar}{false} %Zuweisung
\fi
\whiledo {\boolean{boolvar}}%
{
\stepcounter{tPunkteG}
\ifthenelse{\thetPunkteG > 9}
{
	\setcounter{tPunkteG}{0}
	\stepcounter{anzPunkteGesamt}
}{}
\setlength{\firstlen}{\theanzPunkteGesamt.\thetPunkteG pt}
\ifdim\firstlen=\numberPointsTotal
	\setboolean{boolvar}{false} %Zuweisung
\fi
}
\newcounter{anzAdditionalTotal}
\newcounter{aPunkteG}
\setcounter{anzAdditionalTotal}{0}
\setcounter{aPunkteG}{0}
\setboolean{boolvar}{true}
\setlength{\firstlen}{\theanzAdditionalTotal.\theaPunkteG pt}
\ifdim\firstlen=\numberAdditionalPoints
	\setboolean{boolvar}{false} %Zuweisung
\fi
\whiledo {\boolean{boolvar}}%
{
\stepcounter{aPunkteG}
\ifthenelse{\theaPunkteG > 9}
{
	\setcounter{aPunkteG}{0}
	\stepcounter{anzAdditionalTotal}
}{}
\setlength{\firstlen}{\theanzAdditionalTotal.\theaPunkteG pt}
\ifdim\firstlen=\numberAdditionalPoints
	\setboolean{boolvar}{false} %Zuweisung
\fi
}
\let\tempArray\PointArray
\begin{center}
	\ifthenelse{ \thetPunkteG > 0}
	{
	\ifthenelse{\equal{\german}{1}}{\textbf{Punkte: (maximal \theanzPunkteGesamt.\thetPunkteG\ifthenelse{\equal{\theanzAdditionalTotal+\theaPunkteG}{0+0}}{}{+\ifthenelse{\equal{\theaPunkteG}{0}}{\theanzAdditionalTotal}{\theanzAdditionalTotal.\theaPunkteG}} \ Punkte)}}{\textbf{Points: (maximal \theanzPunkteGesamt.\thetPunkteG\ifthenelse{\equal{\theanzAdditionalTotal+\theaPunkteG}{0+0}}{}{+\ifthenelse{\equal{\theaPunkteG}{0}}{\theanzAdditionalTotal}{\theanzAdditionalTotal.\theaPunkteG}} \ Points)}}\\
	}
	{
	\ifthenelse{\equal{\german}{1}}{\textbf{Punkte: (maximal \theanzPunkteGesamt\ifthenelse{\equal{\theanzAdditionalTotal+\theaPunkteG}{0+0}}{}{+\ifthenelse{\equal{\theaPunkteG}{0}}{\theanzAdditionalTotal}{\theanzAdditionalTotal.\theaPunkteG}} \ Punkte)}}{\textbf{Points: (maximal \theanzPunkteGesamt\ifthenelse{\equal{\theanzAdditionalTotal+\theaPunkteG}{0+0}}{}{+\ifthenelse{\equal{\theaPunkteG}{0}}{\theanzAdditionalTotal}{\theanzAdditionalTotal.\theaPunkteG}} \ Points)}}\\
	}
	\begin{tikzpicture}
		\tikzstyle{every node}=[font=\small]
 		\setcounter{tempPointTable}{1}
                     \forloop{ctPointTable}{0}{\thectPointTable < \thetotalNumber}
		{

  			\node[draw,rectangle,minimum height=0.6 cm, minimum width=2.2 cm] at (\themoveToPointTable *2.2,-\thelinePointTable*1.8){\ifthenelse{\equal{\german}{1}}{Aufgabe}{Exercise} \thetempPointTable};
			\node[draw,rectangle,minimum height=1.0 cm, minimum width=2.2 cm] at( \themoveToPointTable *2.2,-\thelinePointTable*1.8 -0.9){};

			\GetTokens{TokenOne}{TokenTwo}{\tempArray}
			\let\tempArray\TokenTwo

			\draw (\themoveToPointTable *2.2-1.1,-\thelinePointTable*1.8-0.9-0.5) -- (\themoveToPointTable *2.2+1.1,-\thelinePointTable*1.8-0.9+0.5);
			\node at(\themoveToPointTable *2.2+0.55,-\thelinePointTable*1.8-0.9-0.25) [] {\TokenOne};

 			\stepcounter{tempPointTable}
 			\stepcounter{moveToPointTable}
 			\ifthenelse{\themoveToPointTable = 8}{\setcounter{moveToPointTable}{0}\stepcounter{linePointTable}}{}
		}

		\setcounter{ctPointTable}{\thetotalNumber}

		\whiledo {\thectPointTable > 0}%
		{
			\setcounter{ctPointTable}{\thectPointTable - 8}
		}

		\ifthenelse{ \thectPointTable = 0}{\setcounter{ctPointTable}{0}}{\setcounter{ctPointTable}{1}}
		\ifthenelse{\thetotalNumber = 3}
		{
		\node[draw,rectangle,minimum height=0.6 cm, minimum width=2.2 cm] at (\themoveToPointTable * 2.2+\thectPointTable*0.08,-\thelinePointTable*1.8){\ifthenelse{\equal{\german}{1}}{\textbf{Gesamt}}{\textbf{Total}}};
		\node[draw,rectangle,minimum height=1.0 cm, minimum width=2.2 cm] at ( \themoveToPointTable * 2.2+\thectPointTable*0.08,-\thelinePointTable*1.8-0.9) {};
		\draw (\themoveToPointTable * 2.2+\thectPointTable*0.08-1.1,-\thelinePointTable*1.8-0.9-0.5) -- (\themoveToPointTable * 2.2+\thectPointTable*0.08+1.1,-\thelinePointTable*1.8-0.9+0.5);
		\ifthenelse{ \thetPunkteG > 0}
		{
			\node at(\themoveToPointTable * 2.2+\thectPointTable*0.08+0.55,-\thelinePointTable*1.8-0.9-0.25) [] {\theanzPunkteGesamt.\thetPunkteG\ifthenelse{\equal{\theanzAdditionalTotal+\theaPunkteG}{0+0}}{}{+\ifthenelse{\equal{\theaPunkteG}{0}}{\theanzAdditionalTotal}{\theanzAdditionalTotal.\theaPunkteG}}};
		}
		{
			\node at(\themoveToPointTable * 2.2+\thectPointTable*0.08+0.55,-\thelinePointTable*1.8-0.9-0.25) [] {\theanzPunkteGesamt\ifthenelse{\equal{\theanzAdditionalTotal+\theaPunkteG}{0+0}}{}{+\ifthenelse{\equal{\theaPunkteG}{0}}{\theanzAdditionalTotal}{\theanzAdditionalTotal.\theaPunkteG}}};
		}
		}
 		{
		\node[draw,rectangle,minimum height=0.6 cm, minimum width=2.2 cm] at (\themoveToPointTable * 2.2+\thectPointTable*0.05,-\thelinePointTable*1.8){\ifthenelse{\equal{\german}{1}}{\textbf{Gesamt}}{\textbf{Total}}};
		\node[draw,rectangle,minimum height=1.0 cm, minimum width=2.2 cm] at ( \themoveToPointTable * 2.2+\thectPointTable*0.05,-\thelinePointTable*1.8-0.9) {};
\draw (\themoveToPointTable * 2.2+\thectPointTable*0.05-1.1,-\thelinePointTable*1.8-0.9-0.5) -- (\themoveToPointTable * 2.2+\thectPointTable*0.05+1.1,-\thelinePointTable*1.8-0.9+0.5);
		\ifthenelse{ \thetPunkteG > 0}
		{
			\node at(\themoveToPointTable * 2.2+\thectPointTable*0.05+0.55,-\thelinePointTable*1.8-0.9-0.25) [] {\theanzPunkteGesamt.\thetPunkteG\ifthenelse{\equal{\theanzAdditionalTotal+\theaPunkteG}{0+0}}{}{+\ifthenelse{\equal{\theaPunkteG}{0}}{\theanzAdditionalTotal}{\theanzAdditionalTotal.\theaPunkteG}}};
		}
		{
			\node at(\themoveToPointTable * 2.2+\thectPointTable*0.05+0.55,-\thelinePointTable*1.8-0.9-0.25) [] {\theanzPunkteGesamt\ifthenelse{\equal{\theanzAdditionalTotal+\theaPunkteG}{0+0}}{}{+\ifthenelse{\equal{\theaPunkteG}{0}}{\theanzAdditionalTotal}{\theanzAdditionalTotal.\theaPunkteG}}};
		}
		}
	\end{tikzpicture}
\end{center}
}

\newcommand{\points}[1]
{
	\mbox{\ } \hfill {\bf #1}
}

\newcommand{\TaskNumbering}[5]
{
	\bigskip
	\ifthenelse{\equal{\german}{1}}
	{\textbf{Aufgabe #1: #2}
	\\
	#5

	\hfill \ifthenelse{\equal{#4}{\empty}}
	{\points{[\qquad] von #3 Punkten}}
	{\ifthenelse{\equal{#3}{\empty}}{\points{[\qquad] von + #4 Punkten}}{\points{[\qquad] von #3 + #4 Punkten}}}\\\\
	}
	{\textbf{Exercise #1: #2}
	\\
	#5

	\hfill \ifthenelse{\equal{#4}{\empty}}
	{\points{[\qquad] of #3 Points}}
	{\ifthenelse{\equal{#3}{\empty}}{\points{[\qquad] of + #4 Points}}{\points{[\qquad] of #3 + #4 Points}}}\\\\
	}
}

\newcommand{\exerciseNumbering}[4][\empty]
{
	\g@addto@macro{\content}
	{
		\stepcounter{numberTask}
		\TaskNumbering{\thenumberTask}{#2}{#3}{#1}{#4}
	}
	\addtolength{\numberPointsTotal}{#3 pt}
	\stepcounter{totalNumber}
	\ifthenelse{\equal{#1}{\empty}}{\g@addto@macro{\PointArray}{#3,}}{\addtolength{\numberAdditionalPoints}{#1 pt}
	\g@addto@macro{\PointArray}{#3+#1,}}
}

\newcommand{\Task}[5]
{
	\renewcommand{\theenumi}{\alph{enumi}} %erste Ebene wird alphabetisch gesetzt
  	\renewcommand{\labelenumi}{(\theenumi)} %zu faul zum nachschauen, aber wohl wichtig
  	\renewcommand{\theenumii}{\roman{enumii}} %zweite Ebene wird römisch gesetzt
  	\renewcommand{\labelenumii}{\theenumii.} %zu faul zum nachschauen, aber wohl wichtig
  	\TaskNumbering{#1}{#2}{#3}{#4}{\\#5}
  	\renewcommand{\theenumi}{\arabic{enumi}} %erste Ebene zurücksetzen auf arabisch
  	\renewcommand{\labelenumi}{\theenumi.} %zu faul zum nachschauen, aber wohl wichtig
  	\renewcommand{\theenumii}{\alph{enumii}} %zweite Ebene zurücksetzen auf alpha
  	\renewcommand{\labelenumii}{(\theenumii)} %zu faul zum nachschauen, aber wohl wichtig
}

\newcommand{\exercise}[4][\empty]
{
	\g@addto@macro{\content}
	{
		\stepcounter{numberTask}
		\Task{\thenumberTask}{#2}{#3}{#1}{#4}
	}
	\addtolength{\numberPointsTotal}{#3 pt}
	\stepcounter{totalNumber}
	\ifthenelse{\equal{#1}{\empty}}{\g@addto@macro{\PointArray}{#3,}}{\addtolength{\numberAdditionalPoints}{#1 pt}
	\g@addto@macro{\PointArray}{#3+#1,}}
}

\newcommand{\additionalExercise}[3]
{
	\g@addto@macro{\content}
	{
		\stepcounter{numberTask}
		\Task{\thenumberTask}{#1}{\empty}{#2}{#3}
	}
	\stepcounter{totalNumber}
	\addtolength{\numberAdditionalPoints}{#2 pt}
	\g@addto@macro{\PointArray}{+#2,}
}

\newcommand{\additionalExerciseNumbering}[3]
{
	\g@addto@macro{\content}
	{
		\stepcounter{numberTask}
		\TaskNumbering{\thenumberTask}{#1}{\empty}{#2}{#3}
	}
	\stepcounter{totalNumber}
	\addtolength{\numberAdditionalPoints}{#2 pt}
	\g@addto@macro{\PointArray}{+#2,}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newcommand{\question}[3][\empty]
{
	\ifthenelse{\equal{#1}{\empty}}
	{

		\item{\textit{#2}}
		\\
		#3
	}
	{
		\item{\textit{#2}}
		\\
		#3
		\hfill 	\mbox{\ } \hfill \text{ [\qquad] \ifthenelse{\equal{\german}{1}}
				{\textit{von #1 Punkt\ifthenelse{#1>1}{en}{}}}
				{\textit{of #1 Point\ifthenelse{#1>1}{s}{}}}}
	}
}

\newcommand{\group}[2]
{
	\lfoot{#1}
	\cfoot{\thepage\ \ifthenelse{\equal{\german}{1}}{von}{of} \pageref{LastPage}}
	\rfoot{#2}
}

\newcommand{\Title}[1]
{
	\begin{center}
	{
		\Large\bf #1
	}
	\end{center}
}

\newcommand{\header}[1]
{
	{\footnotesize \parindent0em
		{\sc Universität Konstanz}                \hfill #1 \\
		{\sc Fachbereich Informatik \& Informationswissenschaft} \hfill \semester \\
		\name \hfill \today\\
		\ifthenelse{\equal{\german}{1}}{\Title{Lösung des \theexerciseNumber. Aufgabenblattes}}{\Title{Solution of \theexerciseNumber. Assignment}}
	}
}

\newcommand{\Lecture}[2][\empty]
{
	\ifthenelse{\equal{#1}{\empty}}
	{\g@addto@macro{\lecture}{#2}
	 \g@addto@macro{\lectureshort}{#2}}
	{\g@addto@macro{\lecture}{#2}
	 \g@addto@macro{\lectureshort}{#1}}
	\typeout{test}
}

\newcommand{\Header}
{
	\group{\name}{\lectureshort\ –\ \theexerciseNumber}
	\header{\lecture}
	\ifthenelse{\equal{\deadline}{\empty}}{}{\ifthenelse{\equal{\german}{1}}{\hfill \textit{Abgabe: \deadline}\hfill}{\hfill \textit{Deadline: \deadline}\hfill}}
	\pointsTable
}

\newcommand{\Names}[1]
{
\g@addto@macro{\name}{#1}
}

\newcommand{\Term}[1]
{
\g@addto@macro{\semester}{#1}
}

\newenvironment{ukon-infie}[2][\empty]
{
	\setcounter{exerciseNumber}{#2}
	\g@addto@macro{\deadline}{#1}
}
{
	\Header
	\content
}

\newcommand{\newPage}
{
\g@addto@macro{\content}{\newpage}
}

\xdefinecolor{dunkelGruen}{HTML}{007D00}
\xdefinecolor{dunkelBlau}{HTML}{0000A0}
\xdefinecolor{dunkelRot}{HTML}{A00000}
\xdefinecolor{dunkelGelb}{HTML}{FFAA00}
\xdefinecolor{hellGelb}{HTML}{FFCC00}
\colorlet{dGreen}{dunkelGruen}
\colorlet{dBlue}{dunkelBlau}
\colorlet{dRed}{dunkelRot}
\colorlet{dYellow}{dunkelGelb}
\colorlet{lYellow}{hellGelb}

\lstset
{
	language=Java, % oder C++, Pascal, {[77]Fortran}, ...
	numbers=left, % Position der Zeilennummerierung
	firstnumber=auto, % Erste Zeilennummer
	basicstyle=\ttfamily, % Textgröße des Standardtexts
	keywordstyle=\ttfamily\color{dRed}, % Formattierung Schlüsselwörter
	commentstyle=\ttfamily\color{dGreen}, % Formattierung Kommentar
	stringstyle=\ttfamily\color{dBlue}, % Formattierung Strings
	numberstyle=\tiny, % Textgröße der Zeilennummern
	stepnumber=1, % Angezeigte Zeilennummern
	numbersep=5pt, % Abstand zw. Zeilennummern und Code
	aboveskip=15pt, % Abstand oberhalb des Codes
	belowskip=11pt, % Abstand unterhalb des Codes
	captionpos=b, % Position der Überschrift
	xleftmargin=10pt, % Linke Einrückung
	frame=single, % Rahmentyp
	breaklines=true, % Umbruch langer Zeilen
	showstringspaces=false, % Spezielles Zeichen für Leerzeichen
	tabsize=2,
	texcl=true
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%	Befehl zum Einladen eines Files in Java
%	%Para 1: File, das eingeladen werden soll
%	z.B.:	\ladeJava{Uebung}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newcommand{\loadJava}[1]
{
	\lstinputlisting[language=Java]{#1.java}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%	Befehl zum Einladen eines Files in C++
%	%Para 1: File, das eingeladen werden soll
%	z.B.:	\ladeCpp{~/Documents/workspace/MyProgram.cpp}
%			\ladeCpp{~/Documents/workspace/MyHeader.c}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newcommand{\loadCpp}[1]
{
	\lstinputlisting[language=C++]{#1}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%	Befehl zum Einladen eines Files in einer beliebigen Sprache
%	%Parameter 1: Sprache, in der das File geschrieben ist
%	%Parameter 2: Datei, die eingelesen werden soll
%	z.B.:	\ladeCode{Python}{~/Documents/workspace/MyProgram.py
%	Anregungen, eingebunden werden können, siehe unten
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newcommand{\loadSource}[2]
{
	\lstinputlisting[language=#1]{#2}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%	Befehle für Farben
%		z.B.: \tred{Beispieltext}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newcommand{\red}[1]
{
	\textcolor{red}{#1}
}
\newcommand{\blue}[1]
{
	\textcolor{blue}{#1}
}
\newcommand{\green}[1]
{
	\textcolor{green}{#1}
}
\newcommand{\darkRed}[1]
{
	\textcolor{dRed}{#1}
}
\newcommand{\darkBlue}[1]
{
	\textcolor{dBlue}{#1}
}
\newcommand{\darkGreen}[1]
{
	\textcolor{dGreen}{#1}
}
\newcommand{\darkYellow}[1]
{
	\textcolor{dYellow}{#1}
}
\newcommand{\yellow}[1]
{
	\textcolor{lYellow}{#1}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%	Befehle zum Erzeugen eines grünen Hakens, roten Xes, bzw eines gelben Blitzes für Text und einen für Mathemodus
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newcommand{\correct}{\green{\text{\ding{52}}}} %for use in text and math
\newcommand{\wrong}{\red{\text{\ding{56}}}} %for use in text
\newcommand{\tflash}{$\yellow{\lightning}$} %for use in text
\newcommand{\mflash}{\yellow{\lightning}} %for use in math
